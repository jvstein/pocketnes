	AREA wram_code0, CODE, READWRITE

	INCLUDE equates.h
	INCLUDE mem.h
	INCLUDE 6502mac.h
	INCLUDE cart.h
	INCLUDE memory.h
	INCLUDE io.h
	INCLUDE ppu.h
	INCLUDE sound.h

	IMPORT ui	;ui.c
	[ SAVESTATES
	IMPORT quickload	;sram.c
	IMPORT quicksave	;sram.c
	]
	IMPORT _pcmctrl

	IMPORT quickhackfinder
	IMPORT setjmp0hack

	[ CHEATFINDER
	IMPORT do_cheats
	]

	EXPORT CPU_reset
	EXPORT ntsc_pal_reset
	EXPORT cpuhack_reset
	EXPORT run
	EXPORT op_table
	EXPORT default_scanlinehook
	EXPORT default_midlinehook
	EXPORT pcm_scanlinehook
;	EXPORT irq6502
	EXPORT CheckI
	EXPORT cpustate
	EXPORT rommap
	EXPORT frametotal
	EXPORT sleeptime
;	EXPORT novblankwait
	EXPORT dontstop
	EXPORT GLOBAL_PTR_BASE

	EXPORT SPEEDHACK_FIND_BPL_BUF
	EXPORT SPEEDHACK_FIND_BMI_BUF
	EXPORT SPEEDHACK_FIND_BVC_BUF
	EXPORT SPEEDHACK_FIND_BVS_BUF
	EXPORT SPEEDHACK_FIND_BCC_BUF
	EXPORT SPEEDHACK_FIND_BCS_BUF
	EXPORT SPEEDHACK_FIND_BNE_BUF
	EXPORT SPEEDHACK_FIND_BEQ_BUF
	EXPORT SPEEDHACK_FIND_JMP_BUF


	EXPORT rommap
	
	EXPORT g_m6502_pc
	EXPORT g_m6502_s
	EXPORT g_scanline
	EXPORT g_lastbank
	
	EXPORT g_memmap_tbl
	EXPORT g_writemem_tbl
	
	EXPORT g_hackflags3

pcmirqbakup EQU mapperdata+24
pcmirqcount EQU mapperdata+28
;----------------------------------------------------------------------------
_00;   BRK
;----------------------------------------------------------------------------
	[ DEBUG
		adr r0,_00
		mov r1,#0
		bl debug_
	]

	ldr r0,lastbank
	sub r1,m6502_pc,r0
	add r0,r1,#1
	push16			;save PC

	encodeP (B+R)		;save P

	ldr r12,=IRQ_VECTOR
	bl VecCont

	fetch 7
	LTORG
;----------------------------------------------------------------------------
_01;   ORA ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opORA
	fetch 6
;----------------------------------------------------------------------------
_05;   ORA $nn
;----------------------------------------------------------------------------
	doZ
	opORA
	fetch 3
;----------------------------------------------------------------------------
_06;   ASL $nn
;----------------------------------------------------------------------------
	doZ
	opASL
	fetch_c 5
;----------------------------------------------------------------------------
_08;   PHP
;----------------------------------------------------------------------------
	encodeP (B+R)
	push8 r0
	fetch 3
;----------------------------------------------------------------------------
_09;   ORA #$nn
;----------------------------------------------------------------------------
	doIMM
	opORA
	fetch 2
;----------------------------------------------------------------------------
_0A;   ASL
;----------------------------------------------------------------------------
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		;NZ
	orr cycles,cycles,#CYC_C		;Prepare C
	fetch_c 2						;also subs carry
;----------------------------------------------------------------------------
_0D;   ORA $nnnn
;----------------------------------------------------------------------------
	doABS
	opORA
	fetch 4
;----------------------------------------------------------------------------
_0E;   ASL $nnnn
;----------------------------------------------------------------------------
	doABS
	opASL
	fetch_c 6
;----------------------------------------------------------------------------
_10x;   BPL *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_10
	tst m6502_nz,#0x80000000
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_10y;   BPL *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
	tst m6502_nz,#0x80000000
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-4						;speed hack for SMB3.
	beq dobranchhack
	fetch 3
;----------------------------------------------------------------------------
_11;   ORA ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opORA
	fetch 5
;----------------------------------------------------------------------------
_15;   ORA $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opORA
	fetch 4
;----------------------------------------------------------------------------
_16;   ASL $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opASL
	fetch_c 6
;----------------------------------------------------------------------------
_18;   CLC
;----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_C
	fetch 2
;----------------------------------------------------------------------------
_19;   ORA $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opORA
	fetch 4
;----------------------------------------------------------------------------
_1D;   ORA $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opORA
	fetch 4
;----------------------------------------------------------------------------
_1E;   ASL $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opASL
	fetch_c 7
;----------------------------------------------------------------------------
_20;   JSR $nnnn
;----------------------------------------------------------------------------
	ldrb r2,[m6502_pc],#1
	ldr r1,lastbank
	sub r0,m6502_pc,r1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r2,r1,lsl#8
	push16
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_21;   AND ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opAND
	fetch 6
;----------------------------------------------------------------------------
_24;   BIT $nn
;----------------------------------------------------------------------------
	doZ
	opBIT
	fetch 3
;----------------------------------------------------------------------------
_25;   AND $nn
;----------------------------------------------------------------------------
	doZ
	opAND
	fetch 3
;----------------------------------------------------------------------------
_26;   ROL $nn
;----------------------------------------------------------------------------
	doZ
	opROL
	fetch 5
;----------------------------------------------------------------------------
_28;   PLP
;----------------------------------------------------------------------------
	pop8 r0
	decodeP
	fetch 4
;----------------------------------------------------------------------------
_29;   AND #$nn
;----------------------------------------------------------------------------
	doIMM
	opAND
	fetch 2
;----------------------------------------------------------------------------
_2A;   ROL
;----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		;get C
	orrcs m6502_a,m6502_a,#0x00800000
	adds m6502_a,m6502_a,m6502_a
	mov m6502_nz,m6502_a,asr#24		;NZ
	adc cycles,cycles,cycles		;Set C
	fetch 2
;----------------------------------------------------------------------------
_2C;   BIT $nnnn
;----------------------------------------------------------------------------
	doABS
	opBIT
	fetch 4
;----------------------------------------------------------------------------
_2D;   AND $nnnn
;----------------------------------------------------------------------------
	doABS
	opAND
	fetch 4
;----------------------------------------------------------------------------
_2E;   ROL $nnnn
;----------------------------------------------------------------------------
	doABS
	opROL
	fetch 6
;----------------------------------------------------------------------------
_30x;   BMI *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_30
	tst m6502_nz,#0x80000000
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_30y;   BMI *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
	tst m6502_nz,#0x80000000
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	cmp r0,#-4
	beq dobranchhack
	fetch 3
;----------------------------------------------------------------------------
_31;   AND ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opAND
	fetch 5
;----------------------------------------------------------------------------
_35;   AND $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opAND
	fetch 4
;----------------------------------------------------------------------------
_36;   ROL $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opROL
	fetch 6
;----------------------------------------------------------------------------
_38;   SEC
;----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_C
	fetch 2
;----------------------------------------------------------------------------
_39;   AND $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opAND
	fetch 4
;----------------------------------------------------------------------------
_3D;   AND $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opAND
	fetch 4
;----------------------------------------------------------------------------
_3E;   ROL $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opROL
	fetch 7
;----------------------------------------------------------------------------
_40;   RTI
;----------------------------------------------------------------------------
	pop8 r0		;pop 6502 flags and decode
	decodeP
	pop16		;pop the return address
	encodePC
	sub cycles,cycles,#6*3*CYCLE	;???
	b check_irq			;Fixes Dragon Quest
;	fetch 6
;----------------------------------------------------------------------------
_41;   EOR ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opEOR
	fetch 6
;----------------------------------------------------------------------------
_45;   EOR $nn
;----------------------------------------------------------------------------
	doZ
	opEOR
	fetch 3
;----------------------------------------------------------------------------
_46;   LSR $nn
;----------------------------------------------------------------------------
	doZ
	opLSR
	fetch_c 5
;----------------------------------------------------------------------------
_48;   PHA
;----------------------------------------------------------------------------
	mov r0,m6502_a,lsr#24
	push8 r0
	fetch 3
;----------------------------------------------------------------------------
_49;   EOR #$nn
;----------------------------------------------------------------------------
	doIMM
	opEOR
	fetch 2
;----------------------------------------------------------------------------
_4A;   LSR
;----------------------------------------------------------------------------
	movs m6502_nz,m6502_a,lsr#25	;Z, N=0
	mov m6502_a,m6502_nz,lsl#24		;result without garbage
	orr cycles,cycles,#CYC_C		;Prepare C
	fetch_c 2
;----------------------------------------------------------------------------
_4C;   JMP $nnnn
;----------------------------------------------------------------------------
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r0,r1,lsl#8
	encodePC
	fetch 3
;----------------------------------------------------------------------------
_4Cx;   JMP $nnnn
;----------------------------------------------------------------------------
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r0,r1,lsl#8
		tst cycles,#BRANCH
		beq checkdeadloop
		bic cycles,cycles,#BRANCH
fini
	encodePC
	fetch 3
checkdeadloop 		;if thisjumpaddr=lastjumpaddr, cycles=0
		ldr addy,lastjump
		cmp addy,m6502_pc
		andeq cycles,cycles,#CYC_MASK	;Save CPU bits
		strne m6502_pc,lastjump
		b fini
lastjump DCD 0
;----------------------------------------------------------------------------
_4Cy;   JMP $nnnn
;----------------------------------------------------------------------------
	sub addy,m6502_pc,#1
	ldrb r0,[m6502_pc],#1
	ldrb r1,[m6502_pc]
	orr m6502_pc,r0,r1,lsl#8
	encodePC
	subs r0,addy,m6502_pc
	beq dobranchhackjmp
	fetch 3
;----------------------------------------------------------------------------
_4D;   EOR $nnnn
;----------------------------------------------------------------------------
	doABS
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_4E;   LSR $nnnn
;----------------------------------------------------------------------------
	doABS
	opLSR
	fetch_c 6
;----------------------------------------------------------------------------
_50x;   BVC *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_50
	tst cycles,#CYC_V
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_50y;   BVC *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
	tst cycles,#CYC_V
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	cmp r0,#-4
	beq dobranchhack
	fetch 3
;----------------------------------------------------------------------------
_51;   EOR ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opEOR
	fetch 5
;----------------------------------------------------------------------------
_55;   EOR $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_56;   LSR $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opLSR
	fetch_c 6
;----------------------------------------------------------------------------
_58;   CLI
;----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_I
	sub cycles,cycles,#2*3*CYCLE	;???
	b check_irq			;Fixes Dragon Quest
;	fetch 2
;----------------------------------------------------------------------------
_59;   EOR $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_5D;   EOR $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_5E;   LSR $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opLSR
	fetch_c 7
;----------------------------------------------------------------------------
_60;   RTS
;----------------------------------------------------------------------------
	pop16
	add m6502_pc,m6502_pc,#1
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_61;   ADC ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opADC
	fetch_c 6
;----------------------------------------------------------------------------
_65;   ADC $nn
;----------------------------------------------------------------------------
	doZ
	opADC
	fetch_c 3
;----------------------------------------------------------------------------
_66;   ROR $nn
;----------------------------------------------------------------------------
	doZ
	opROR
	fetch 5
;----------------------------------------------------------------------------
_68;   PLA
;----------------------------------------------------------------------------
	pop8 m6502_nz
	mov m6502_a,m6502_nz,lsl#24
	fetch 4
;----------------------------------------------------------------------------
_69;   ADC #$nn
;----------------------------------------------------------------------------
	doIMM
	opADC
	fetch_c 2
;----------------------------------------------------------------------------
_6A;   ROR
;----------------------------------------------------------------------------
	movs cycles,cycles,lsr#1		;get C
	mov m6502_a,m6502_a,rrx
	movs m6502_nz,m6502_a,asr#24	;NZ
	and m6502_a,m6502_a,#0xff000000
	adc cycles,cycles,cycles		;Set C
	fetch 2
;----------------------------------------------------------------------------
_6C;   JMP ($nnnn)
;----------------------------------------------------------------------------
	doABS
	adr r1,memmap_tbl
	and r2,addy,#0xE000
	ldr r1,[r1,r2,lsr#11]
	ldrb m6502_pc,[r1,addy]!
	[ HAPPY_CPU_TESTER
	;wrap fix to make CPU testers happy
	mov r0,addy,lsl#24
	adds r0,r0,#0x01000000
	subcs r1,r1,#0x100
	]
	ldrb r0,[r1,#1]
	
	
	orr m6502_pc,m6502_pc,r0,lsl#8
	encodePC
	fetch 5
;----------------------------------------------------------------------------
_6D;   ADC $nnnn
;----------------------------------------------------------------------------
	doABS
	opADC
	fetch_c 4
;----------------------------------------------------------------------------
_6E;   ROR $nnnn
;----------------------------------------------------------------------------
	doABS
	opROR
	fetch 6
;----------------------------------------------------------------------------
_70x;   BVS *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_70
	tst cycles,#CYC_V
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_70y;   BVS *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
	tst cycles,#CYC_V
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	cmp r0,#-4
	beq dobranchhack
	fetch 3
;----------------------------------------------------------------------------
_71;   ADC ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opADC
	fetch_c 5
;----------------------------------------------------------------------------
_75;   ADC $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opADC
	fetch_c 4
;----------------------------------------------------------------------------
_76;   ROR $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opROR
	fetch 6
;----------------------------------------------------------------------------
_78;   SEI
;----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_I
	fetch 2
;----------------------------------------------------------------------------
_79;   ADC $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opADC
	fetch_c 4
;----------------------------------------------------------------------------
_7D;   ADC $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opADC
	fetch_c 4
;----------------------------------------------------------------------------
_7E;   ROR $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opROR
	fetch 7
;----------------------------------------------------------------------------
_81;   STA ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opSTORE m6502_a
	fetch 6
;----------------------------------------------------------------------------
_84;   STY $nn
;----------------------------------------------------------------------------
	doZ
	opSTORE m6502_y
	fetch 3
;----------------------------------------------------------------------------
_85;   STA $nn
;----------------------------------------------------------------------------
	doZ
	opSTORE m6502_a
	fetch 3
;----------------------------------------------------------------------------
_86;   STX $nn
;----------------------------------------------------------------------------
	doZ
	opSTORE m6502_x
	fetch 3
;----------------------------------------------------------------------------
_88;   DEY
;----------------------------------------------------------------------------
	sub m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;----------------------------------------------------------------------------
_8A;   TXA
;----------------------------------------------------------------------------
	mov m6502_a,m6502_x
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_8C;   STY $nnnn
;----------------------------------------------------------------------------
	doABS
	opSTORE m6502_y
	fetch 4
;----------------------------------------------------------------------------
_8D;   STA $nnnn
;----------------------------------------------------------------------------
	doABS
	opSTORE m6502_a
	fetch 4
;----------------------------------------------------------------------------
_8E;   STX $nnnn
;----------------------------------------------------------------------------
	doABS
	opSTORE m6502_x
	fetch 4
;----------------------------------------------------------------------------
_90x;   BCC *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_90
	tst cycles,#CYC_C			;Test Carry
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_90y;   BCC *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
	tst cycles,#CYC_C			;Test Carry
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	cmp r0,#-4
	beq dobranchhack
	fetch 3
;----------------------------------------------------------------------------
_91;   STA ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opSTORE m6502_a
	fetch 6
;----------------------------------------------------------------------------
_94;   STY $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_y
	fetch 4
;----------------------------------------------------------------------------
_95;   STA $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opSTORE m6502_a
	fetch 4
;----------------------------------------------------------------------------
_96;   STX $nn,Y
;----------------------------------------------------------------------------
	doZIYf
	opSTORE m6502_x
	fetch 4
;----------------------------------------------------------------------------
_98;   TYA
;----------------------------------------------------------------------------
	mov m6502_a,m6502_y
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;----------------------------------------------------------------------------
_99;   STA $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opSTORE m6502_a
	fetch 5
;----------------------------------------------------------------------------
_9A;   TXS
;----------------------------------------------------------------------------
	mov r0,m6502_x,lsr#24
	strb r0,m6502_s
	fetch 2
;----------------------------------------------------------------------------
_9D;   STA $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opSTORE m6502_a
	fetch 5
;----------------------------------------------------------------------------
_A0;   LDY #$nn
;----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_y
	fetch 2
;----------------------------------------------------------------------------
_A1;   LDA ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opLOAD m6502_a
	fetch 6
;----------------------------------------------------------------------------
_A2;   LDX #$nn
;----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_x
	fetch 2
;----------------------------------------------------------------------------
_A4;   LDY $nn
;----------------------------------------------------------------------------
	doZ
	opLOAD m6502_y
	fetch 3
;----------------------------------------------------------------------------
_A5;   LDA $nn
;----------------------------------------------------------------------------
	doZ
	opLOAD m6502_a
	fetch 3
;----------------------------------------------------------------------------
_A6;   LDX $nn
;----------------------------------------------------------------------------
	doZ
	opLOAD m6502_x
	fetch 3
;----------------------------------------------------------------------------
_A8;   TAY
;----------------------------------------------------------------------------
	mov m6502_y,m6502_a
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;----------------------------------------------------------------------------
_A9;   LDA #$nn
;----------------------------------------------------------------------------
	doIMM
	opLOAD m6502_a
	fetch 2
;----------------------------------------------------------------------------
_AA;   TAX
;----------------------------------------------------------------------------
	mov m6502_x,m6502_a
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_AC;   LDY $nnnn
;----------------------------------------------------------------------------
	doABS
	opLOAD m6502_y
	fetch 4
;----------------------------------------------------------------------------
_AD;   LDA $nnnn
;----------------------------------------------------------------------------
	doABS
	opLOAD m6502_a
	fetch 4
;----------------------------------------------------------------------------
_AE;   LDX $nnnn
;----------------------------------------------------------------------------
	doABS
	opLOAD m6502_x
	fetch 4
;----------------------------------------------------------------------------
_B0x;   BCS *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_B0
	tst cycles,#CYC_C			;Test Carry
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_B0y;   BCS *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
	tst cycles,#CYC_C			;Test Carry
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	cmp r0,#-4
	beq dobranchhack
	fetch 3
;----------------------------------------------------------------------------
_B1;   LDA ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opLOAD m6502_a
	fetch 5
;----------------------------------------------------------------------------
_B4;   LDY $nn,X
;----------------------------------------------------------------------------
	doZIX
	opLOAD m6502_y
	fetch 4
;----------------------------------------------------------------------------
_B5;   LDA $nn,X
;----------------------------------------------------------------------------
	doZIX
	opLOAD m6502_a
	fetch 4
;----------------------------------------------------------------------------
_B6;   LDX $nn,Y
;----------------------------------------------------------------------------
	doZIY
	opLOAD m6502_x
	fetch 4
;----------------------------------------------------------------------------
_B8;   CLV
;----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_V
	fetch 2
;----------------------------------------------------------------------------
_B9;   LDA $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opLOAD m6502_a
	fetch 4
;----------------------------------------------------------------------------
_BA;   TSX
;----------------------------------------------------------------------------
	ldrb m6502_x,m6502_s
	mov m6502_x,m6502_x,lsl#24
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_BC;   LDY $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opLOAD m6502_y
	fetch 4
;----------------------------------------------------------------------------
_BD;   LDA $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opLOAD m6502_a
	fetch 4
;----------------------------------------------------------------------------
_BE;   LDX $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opLOAD m6502_x
	fetch 4
;----------------------------------------------------------------------------
_C0;   CPY #$nn
;----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_y
	fetch_c 2
;----------------------------------------------------------------------------
_C1;   CMP ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opCOMP m6502_a
	fetch_c 6
;----------------------------------------------------------------------------
_C4;   CPY $nn
;----------------------------------------------------------------------------
	doZ
	opCOMP m6502_y
	fetch_c 3
;----------------------------------------------------------------------------
_C5;   CMP $nn
;----------------------------------------------------------------------------
	doZ
	opCOMP m6502_a
	fetch_c 3
;----------------------------------------------------------------------------
_C6;   DEC $nn
;----------------------------------------------------------------------------
	doZ
	opDEC
	fetch 5
;----------------------------------------------------------------------------
_C8;   INY
;----------------------------------------------------------------------------
	add m6502_y,m6502_y,#0x01000000
	mov m6502_nz,m6502_y,asr#24
	fetch 2
;----------------------------------------------------------------------------
_C9;   CMP #$nn
;----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_a
	fetch_c 2
;----------------------------------------------------------------------------
_CA;   DEX
;----------------------------------------------------------------------------
	sub m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_CC;   CPY $nnnn
;----------------------------------------------------------------------------
	doABS
	opCOMP m6502_y
	fetch_c 4
;----------------------------------------------------------------------------
_CD;   CMP $nnnn
;----------------------------------------------------------------------------
	doABS
	opCOMP m6502_a
	fetch_c 4
;----------------------------------------------------------------------------
_CE;   DEC $nnnn
;----------------------------------------------------------------------------
	doABS
	opDEC
	fetch 6
;----------------------------------------------------------------------------
_D0x;   BNE *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_D0
	tst m6502_nz,#0xff
	ldrsb r0,[m6502_pc],#1
	addne m6502_pc,m6502_pc,r0
	subne cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_D0y;   BNE *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
	tst m6502_nz,#0xff
	beq nobranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-4						;speed hack for Dragon Warrior?.
	beq dobranchhackbne
	fetch 3
;----------------------------------------------------------------------------
_D1;   CMP ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opCOMP m6502_a
	fetch_c 5
;----------------------------------------------------------------------------
_D5;   CMP $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opCOMP m6502_a
	fetch_c 4
;----------------------------------------------------------------------------
_D6;   DEC $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opDEC
	fetch 6
;----------------------------------------------------------------------------
_D8;   CLD
;----------------------------------------------------------------------------
	bic cycles,cycles,#CYC_D
	fetch 2
;----------------------------------------------------------------------------
_D9;   CMP $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opCOMP m6502_a
	fetch_c 4
;----------------------------------------------------------------------------
_DD;   CMP $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opCOMP m6502_a
	fetch_c 4
;----------------------------------------------------------------------------
_DE;   DEC $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opDEC
	fetch 7
;----------------------------------------------------------------------------
_E0;   CPX #$nn
;----------------------------------------------------------------------------
	doIMM
	opCOMP m6502_x
	fetch_c 2
;----------------------------------------------------------------------------
_E1;   SBC ($nn,X)
;----------------------------------------------------------------------------
	doIIX
	opSBC
	fetch_c 6
;----------------------------------------------------------------------------
_E4;   CPX $nn
;----------------------------------------------------------------------------
	doZ
	opCOMP m6502_x
	fetch_c 3
;----------------------------------------------------------------------------
_E5;   SBC $nn
;----------------------------------------------------------------------------
	doZ
	opSBC
	fetch_c 3
;----------------------------------------------------------------------------
_E6;   INC $nn
;----------------------------------------------------------------------------
	doZ
	opINC
	fetch 5
;----------------------------------------------------------------------------
_E8;   INX
;----------------------------------------------------------------------------
	add m6502_x,m6502_x,#0x01000000
	mov m6502_nz,m6502_x,asr#24
	fetch 2
;----------------------------------------------------------------------------
_E9;   SBC #$nn
;----------------------------------------------------------------------------
	doIMM
	opSBC
	fetch_c 2
;----------------------------------------------------------------------------
_EA;   NOP
;----------------------------------------------------------------------------
	fetch 2
;----------------------------------------------------------------------------
_EC;   CPX $nnnn
;----------------------------------------------------------------------------
	doABS
	opCOMP m6502_x
	fetch_c 4
;----------------------------------------------------------------------------
_ED;   SBC $nnnn
;----------------------------------------------------------------------------
	doABS
	opSBC
	fetch_c 4
;----------------------------------------------------------------------------
_EE;   INC $nnnn
;----------------------------------------------------------------------------
	doABS
	opINC
	fetch 6
;----------------------------------------------------------------------------
_F0x;   BEQ *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_F0
	tst m6502_nz,#0xff
	ldrsb r0,[m6502_pc],#1
	addeq m6502_pc,m6502_pc,r0
	subeq cycles,cycles,#3*CYCLE
	fetch 2
;----------------------------------------------------------------------------
_F0y;   BEQ *
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
	tst m6502_nz,#0xff
	bne nobranch
	ldrsb r0,[m6502_pc],#1
	add m6502_pc,m6502_pc,r0
	cmp r0,#-4						;speed hack for Ballon Fight.
	beq dobranchhack
	fetch 3
nobranch
	add m6502_pc,m6502_pc,#1
	fetch 2
dobranchhackbne
	cmp r0,#-3
	bne dobranchhack
	;look for DEX/DEY
	ldrb r0,[m6502_pc]
	cmp r0,#0xCA ;DEX
	beq dobranchhack3_dex
	cmp r0,#0x88 ;DEY
	bne %f0
dobranchhack3_dey
	mov r0,m6502_y,lsr#24
	mov m6502_y,#0
	b %f1
dobranchhack3_dex
	mov r0,m6502_x,lsr#24
	mov m6502_x,#0
	;executes DEX, BNE -3 (branch taken) X-1 times
	;executes DEX, BNE -3 (branch not taken) 1 time
	;takes (5X-1) cycles*3
1
	mov r1,#5*3
	mul r0,r1,r0
	sub r0,r0,#1*3
	sub cycles,cycles,r0,lsl#CYC_SHIFT
	mov m6502_nz,#0
	add m6502_pc,m6502_pc,#3
	b %f0
	;fixme: pocketnes can't handle more than one scanline per instruction
	
dobranchhackjmp
dobranchhack
	ldr r0,scanline
	cmp r0,#241
	bge %f0
	;add safety code here
	and cycles,cycles,#CYC_MASK	;speed hack
0
	fetch 3
	
;----------------------------------------------------------------------------
_F1;   SBC ($nn),Y
;----------------------------------------------------------------------------
	doIIY
	opSBC
	fetch_c 5
;----------------------------------------------------------------------------
_F5;   SBC $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opSBC
	fetch_c 4
;----------------------------------------------------------------------------
_F6;   INC $nn,X
;----------------------------------------------------------------------------
	doZIXf
	opINC
	fetch 6
;----------------------------------------------------------------------------
_F8;   SED
;----------------------------------------------------------------------------
	orr cycles,cycles,#CYC_D
	fetch 2
;----------------------------------------------------------------------------
_F9;   SBC $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opSBC
	fetch_c 4
;----------------------------------------------------------------------------
_FD;   SBC $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opSBC
	fetch_c 4
;----------------------------------------------------------------------------
_FE;   INC $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opINC
	fetch 7

	AREA rom_code_0, CODE, READONLY

;illegal SLO instruction

;----------------------------------------------------------------------------
_07;	SLO $nn
;----------------------------------------------------------------------------
	doZ
	opSLO
	fetch_c 5
;----------------------------------------------------------------------------
_0F;	SLO $nnnn
;----------------------------------------------------------------------------
	doABS
	opSLO
	fetch_c 6
;----------------------------------------------------------------------------
_17;	SLO $nnnn
;----------------------------------------------------------------------------
	doZIXf
	opSLO
	fetch_c 6
;----------------------------------------------------------------------------
_1B;	SLO $nnnn,Y
;----------------------------------------------------------------------------
	doAIY
	opSLO
	fetch_c 7
;----------------------------------------------------------------------------
_1F;	SLO $nnnn,X
;----------------------------------------------------------------------------
	doAIX
	opSLO
	fetch_c 7


;----------------------------------------------------------------------------
_x2;	DOP  ;2 cycle double nop (_89 for Puzznic)
;----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1
	fetch 2
;----------------------------------------------------------------------------
_x3;	DOP  ;3 cycle double nop
;----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1
	fetch 3
;----------------------------------------------------------------------------
_x4;	DOP  ;4 cycle double nop
;----------------------------------------------------------------------------
	add m6502_pc,m6502_pc,#1
	fetch 4


;----------------------------------------------------------------------------
_B3;   LDAX ($nn),Y   ;illegal instruction used by Super Cars
;----------------------------------------------------------------------------
	doIIY
	opLOAD m6502_a
	mov m6502_x,m6502_a
	fetch 5


;----------------------------------------------------------------------------
run	;r0=0 to return after frame
;----------------------------------------------------------------------------
	tst r0,#1
	stmeqfd sp!,{m6502_nz-m6502_pc,globalptr,cpu_zpage,lr}

	ldr globalptr,=GLOBAL_PTR_BASE
	ldr cpu_zpage,=NES_RAM

	strb r0,_dontstop

	
	IMPORT ewram_owner_is_sram
	IMPORT redecompress
	ldr r2,=ewram_owner_is_sram
	ldrb r2,[r2]
	movs r2,r2
	ldrne r1,=redecompress
	movne lr,pc
	bxne r1
;;	ldr r1,=redecompress
;;	mov lr,pc
;;	bx r1

	mov r1,#0
	strb r1,novblankwait_

	b line0x
;----------------------------------------------------------------------------
;cycles ran out
;----------------------------------------------------------------------------
line0
	adr r2,cpuregs
	stmia r2,{m6502_nz-m6502_pc}	;save 6502 state
waitformulti
	ldr r1,=REG_P1				;refresh input every frame
	ldrh r0,[r1]
		eor r0,r0,#0xff
		eor r0,r0,#0x300		;r0=button state (raw)
	ldr r1,AGBjoypad
	eor r1,r1,r0
	and r1,r1,r0				;r1=button state (0->1)
	str r0,AGBjoypad

	ldrb r3,emuflags+1
	cmp r3,#SCALED
	bhs %F0						;if unscaled
	ldrb r3,windowtop
	tst r0,#0x100				;R=scroll down
	addne r3,r3,#2
	cmp r3,#80
	movhi r3,#80
	tst r0,#0x200				;L=scroll up
	subnes r3,r3,#2
	movmi r3,#0
	strb r3,windowtop
0
	ldrb r2,_dontstop
	cmp r2,#0
	ldmeqfd sp!,{m6502_nz-m6502_pc,globalptr,cpu_zpage,lr}	;exit here if doing single frame:
	bxeq lr						;return to rommenu()

	;----anything from here til line0x won't get executed while rom menu is active---

	mov r2,#REG_BASE
	mov r3,#0x0110
	strh r3,[r2,#REG_BLDCNT]	;stop darkened screen,OBJ blend to BG0
	mov r3,#0x1000				;BG0=16, OBJ=0
	strh r3,[r2,#REG_BLDALPHA]	;Alpha values

	adr lr,line0x				;return here after doing L/R + SEL/START

	tst r1,#0x300				;if L or R was pressed
	tstne r0,#0x100
	tstne r0,#0x200				;and both L+R are held..
	ldrne r1,=ui
	bxne r1						;do menu

	ands r3,r0,#0x300			;if either L or R is pressed (not both)
	eornes r3,r3,#0x300
	bicne r0,r0,#0x0c			;hide sel,start from EMU
	str r0,NESjoypad
	beq line0x					;skip ahead if neither or both are pressed

	tst r0,#0x200
	tstne r1,#4					;L+SEL for BG adjust
	ldrneb r2,adjustblend
	addne r2,r2,#1
	strneb r2,adjustblend

	tst r0,#0x200				;L?
	tstne r1,#8					;START?
	ldrb r2,novblankwait_		;0=Normal, 1=No wait, 2=Slomo
	addne r2,r2,#1
	cmp r2,#3
	moveq r2,#0
	strb r2,novblankwait_
	
	[ SAVESTATES
	tst r0,#0x100				;R?
	tstne r1,#8					;START:
	ldrne r1,=quickload
	bxne r1

	tst r0,#0x100				;R?
	tstne r1,#4					;SELECT:
	ldrne r1,=quicksave
	bxne r1
	]
line0x

	ldr r2,=ewram_owner_is_sram
	ldrb r2,[r2]
	movs r2,r2
	ldrne r1,=redecompress
	movne lr,pc
	bxne r1

	bl_long refreshNESjoypads	;Z=1 if communication ok
	bne waitformulti		;waiting on other GBA..

	ldr r0,AGBjoypad
	ldr r1,=fiveminutes
	ldr r2,[r1] ;fiveminutes		;sleep after 5/10/30 minutes of inactivity
	cmp r0,#0				;(left out of the loop so waiting on multi-link
	ldrne r2,[r1,#4] ;sleeptime		;doesn't accelerate time)
	subs r2,r2,#1
	str r2,[r1] ;fiveminutes
	bleq suspend

	ldr r1,=ppustat_
	mov r0,#0
	strb r0,[r1]
	ldr r0,stat_r_simple_func
	ldr r1,=PPU_read_tbl+8
	str r0,[r1]
	
	
;	mov r1,#0
;	strb r1,ppustat_		;vbl clear, sprite0 clear
	mov r1,#0
	str r1,scanline			;reset scanline count

	bl_long newframe				;display update
	bl updatesound

	[ CHEATFINDER
	ldr r0,=do_cheats
	mov lr,pc
	bx r0
	]

;-----------------------------------
;	ldr r0,=0x04000006	;to write out the scanline
;	ldrh r0,[r0]
;	mov r1,#19
;	bl debug_
;-----------------------------------

	ldr r0,fpsvalue
	add r0,r0,#1
	str r0,fpsvalue

	adr r0,cpuregs
	ldmia r0,{m6502_nz-m6502_pc}	;restore 6502 state

	ldr r0,cyclesperscanline1
	ldr r1,frame
	tst r1,#1
	subeq r0,r0,#CYCLE			;Every other frame has 1/3 less CPU cycle.
	add cycles,cycles,r0
	ldr r0,=timeout_line0
	str r0,line_end_timeout
	ldr r0,=timeout_midline_line0
	str r0,line_mid_timeout
	str r0,nexttimeout

	ldr pc,scanlinehook

	AREA wram_code00, CODE, READWRITE


timeout_midline_line0
	adr r0,timeout_midline
	str r0,line_mid_timeout
	
	ldr r0,scrollY
	bl newY
timeout_midline
	ldr r0,line_end_timeout
	str r0,nexttimeout
	
	ldr r0,scanline
	add r0,r0,#1
	str r0,scanline
	mov r1,#1
	strb r1,midscanline
	
1
cyclesperscanline2_modify
	add cycles,cycles,#85*CYCLE
	
	cmp r0,#240
	ldrgt pc,midlinehook
	
	ldrb r1,ppuctrl1	;???
	ands r1,r1,#0x18
	beq_long skipaheadlines
	strneb r1,ppuctrl1_startframe	
skipaheadlines_return
	;Reset X scroll (least 3 bits update before rest)
	ldrb r0,nextx
	ldrb r1,scrollX
	eors addy,r0,r1
	ldreq pc,midlinehook
	strb r0,scrollX
	bl newX
	ldr pc,midlinehook

timeout_line0
	ldr r0,line_mid_timeout
	str r0,nexttimeout
	
	ldr r0,scanline
	
cyclesperscanline1_modify 
	add cycles,cycles,#1
	
	mov r1,#0
	strb r1,midscanline

	ldr r1,lastscanline
	cmp r0,r1
	beq lastscanlinestuff
	ldr r1,sprite0y
	cmp r0,r1
	bleq line_y_stuff
	cmp r0,#242
	beq line_242_stuff
	cmp r0,#119
	beq line_119_stuff
	cmp r0,#1
	beq line_1_stuff
	ldr pc,scanlinehook
lastscanlinestuff
	ldr r0,=line0
	str r0,line_end_timeout
	ldr pc,scanlinehook
line_1_stuff
	bl newframe_set0
	
	;yucky code because it only finds out the hit position here, graphics change and it's no longer valid
	bl findsprite0
	;end yucky code
	
	ldr pc,scanlinehook

line_y_stuff
	stmfd sp!,{r0,lr}
	bl update_Y_hit
	ldmfd sp!,{r0,pc}
;	bx lr

;line_Y_stuff
;	stmfd sp!,{r0-r12,lr}
;	bl findsprite0
;	ldmfd sp!,{r0-r12,pc}
	
line_119_stuff
	[ DIRTYTILES
	;this is essential for Rare games
	ldrb r0,ppuctrl1
	tst r0,#0x18
	beq %f0
	mov r0,#1
	strb r0,has_run_nes_chr_update_this_frame
	bl nes_chr_update
0	
	]
	
	ldrb r0,ppuctrl0
	strb r0,ppuctrl0frame		;Contra likes this

	ldr pc,scanlinehook

line_242_stuff
	stmfd sp!,{r0-m6502_pc}	;save 6502 state

	ldrb r0,hackflags3
	movs r0,r0
	blne_long call_quickhackfinder

	bl newframe_nes_vblank
	ldmfd sp!,{r0-m6502_pc}	;save 6502 state

NMIDELAY EQU CYCLE*21
	ldr r1,cyclesperscanline1
	sub cycles,cycles,r1
	add cycles,cycles,#NMIDELAY
	ldr r2,=ppustat_
	ldrb r0,[r2]
	orr r0,r0,#0x80	;set vbl, keep sprite0
	strb r0,[r2]
	ldr r0,=stat_R_clearvbl
	ldr r2,=PPU_read_tbl+8
	str r0,[r2]
	
	adr addy,line242NMI
	str addy,nexttimeout
	b default_scanlinehook
line242NMI
	ldr r0,line_mid_timeout
	str r0,nexttimeout
	
	ldr r0,frame
	add r0,r0,#1
	str r0,frame
 [ DEBUG
	mov r1,#REG_BASE			;darken screen during NES vblank
	mov r0,#0x00f1
	strh r0,[r1,#REG_BLDCNT]
	ldrh r0,[r1,#REG_VCOUNT]
	mov r1,#19
	bl debug_
 ]

;frame irq (this is inaccurate as all hell, since it's based on the PPU instead of the APU...)
	ldrb r0,apu_4017
	cmp r0,#0x00
	bne noframeirq
	mov r0,#0x40
	strb r0,doframeirq
	tst cycles,#CYC_I
	bne noframeirq
	sub cycles,cycles,#6*3*CYCLE
	ldr r12,=IRQ_VECTOR
	bl Vec6502

noframeirq

	ldrb r0,ppuctrl0
	tst r0,#0x80
	beq %F0			;NMI?

	ldr r12,=NMI_VECTOR
	bl Vec6502
	sub cycles,cycles,#3*7*CYCLE
0
	ldr r0,cyclesperscanline1
	add cycles,cycles,r0
	sub cycles,cycles,#NMIDELAY
	ldr pc,scanlinehook

;line1_to_119 ;------------------------
;	ldr r0,cyclesperscanline
;	add cycles,cycles,r0
;
;	ldr r1,scanline
;	add r1,r1,#1
;	str r1,scanline
;	cmp r1,#119
;	ldrne pc,scanlinehook
;;--------------------------------------------- between 119 and 120
;	ldr r0,nes_chr_map			;For sprites
;	str r0,old_chr_map			;TMNT 2 likes this
;	ldr r0,nes_chr_map+4
;	str r0,old_chr_map+4
;
;	ldrb r0,ppuctrl0
;	strb r0,ppuctrl0frame		;Contra likes this
;
;	adr addy,line120_to_240
;	str addy,nexttimeout
;	ldr pc,scanlinehook
;line120_to_240 ;------------------------
;	ldr r0,cyclesperscanline
;	add cycles,cycles,r0
;
;	ldr r1,scanline
;	add r1,r1,#1
;	str r1,scanline
;	cmp r1,#240
;	ldrne pc,scanlinehook
;
;	adr addy,line242
;	str addy,nexttimeout
;	ldr pc,scanlinehook
;line242 ;------------------------
;NMIDELAY EQU CYCLE*21
;	add cycles,cycles,#NMIDELAY	;NMI is delayed a few cycles..
;
;;	ldrb r1,ppustat_
;;	orr r1,r1,#0x90		;vbl & vram write
;	mov r1,#0x80		;vbl flag
;	strb r1,ppustat_
;
;	adr addy,line242NMI
;	str addy,nexttimeout
;	b default_scanlinehook
;line242NMI ;---------------------------
;	ldr r0,frame
;	add r0,r0,#1
;	str r0,frame
; [ DEBUG
;	mov r1,#REG_BASE			;darken screen during NES vblank
;	mov r0,#0x00f1
;	strh r0,[r1,#REG_BLDCNT]
;	ldrh r0,[r1,#REG_VCOUNT]
;	mov r1,#19
;	bl debug_
; ]
;
;;frame irq
;	ldrb r0,apu_4017
;	cmp r0,#0x00
;	bne noframeirq
;	mov r0,#0x40
;	strb r0,doframeirq
;	tst cycles,#CYC_I
;	bne noframeirq
;	sub cycles,cycles,#6*3*CYCLE
;	ldr r12,=IRQ_VECTOR
;	bl Vec6502
;
;noframeirq
;
;	ldrb r0,ppuctrl0
;	tst r0,#0x80
;	beq %F0			;NMI?
;
;	ldr r12,=NMI_VECTOR
;	bl Vec6502
;	sub cycles,cycles,#3*7*CYCLE
;0
;	ldr r0,cyclesperscanline
;	add cycles,cycles,r0
;	sub cycles,cycles,#NMIDELAY
;	adr r1,line242_to_end
;	str r1,nexttimeout
;
;	mov r0,#241
;	str r0,scanline
;
;	ldr pc,scanlinehook
;line242_to_end ;------------------------
;	ldr r0,cyclesperscanline
;	add cycles,cycles,r0
;
;	ldr r1,scanline
;	ldr r2,lastscanline
;	add r1,r1,#1
;	str r1,scanline
;	cmp r1,r2
;	adreq addy,line0
;	streq addy,nexttimeout
;
;	ldr pc,scanlinehook

pcm_scanlinehook
	ldr addy,=_pcmctrl
	ldr r2,[addy]
	tst r2,#0x1000			;Is PCM on?
	beq hk0

	ldr r0,pcmirqcount
;	ldr r1,cyclesperscanline
;	subs r0,r0,r1,lsr#4
	subs r0,r0,#121			;Fire Hawk=122
	str r0,pcmirqcount
	bpl hk0

	tst r2,#0x40			;Is PCM loop on?
	ldrne r0,pcmirqbakup
	strne r0,pcmirqcount
	bne hk0
	tst r2,#0x80			;Is PCM IRQ on?
	orrne r2,r2,#0x8000		;set pcm IRQ bit in R4015
	bic r2,r2,#0x1000		;clear channel 5
	str r2,[addy]
	bne CheckI
	b default_scanlinehook

check_irq
	;first verify ints are enabled
	tst cycles,#CYC_I
	bne default_scanlinehook

	;frame irq?
	ldrb r0,doframeirq
	;dpcm irq?
	ldr addy,=_pcmctrl
	ldrb r1,[addy,#1]
	and r1,r1,#0x80		;only read pcm IRQ
	orrs r0,r0,r1

	bne irq6502
	;code continues to the fetch 0 below
hk0
default_midlinehook
default_scanlinehook
	fetch 0

;----------------------------------------------------------
CheckI								;Check Interrupt Disable
;----------------------------------------------------------
	tst cycles,#CYC_I
	bne default_scanlinehook		;we dont want no stinkin irqs
;----------------------------------------------------------
irq6502
;----------------------------------------------------------
	ldr r12,=IRQ_VECTOR
	bl Vec6502
	fetch 7
;----------------------------------------------------------
Vec6502
;----------------------------------------------------------
	ldr r0,lastbank
	sub r0,m6502_pc,r0
	push16					;save PC

	encodeP (R)				;save P
VecCont
	push8 r0

	orr cycles,cycles,#CYC_I	;disable IRQ
;	bic cycles,cycles,#CYC_D	;and decimal mode

	ldr r0,memmap_tbl+7*4
	ldrb m6502_pc,[r0,r12]!
	ldrb r2,[r0,#1]
	orr m6502_pc,m6502_pc,r2,lsl#8
	encodePC				;get IRQ vector

	bx lr
;----------------------------------------------------------------------------
fiveminutes DCD 5*60*60
sleeptime DCD 5*60*60
	DCB 0
;novblankwait DCB 0
	DCB 0
	DCB 0
	DCB 0
;----------------------------------------------------------------------------
	AREA rom_code, CODE, READONLY
skipaheadlines
	;if has been off the whole frame, don't bother changing scrolling (for speed)
	ldrb r1,ppuctrl1_startframe
	ands r1,r1,#0x18
	ldreq pc,midlinehook

	;last scrolled 
	;current Y coordinate = scrollY + scanline - scrollYline
	ldr r0,scrollYold
	ldr r1,scrollYline
	ldr r2,scanline
	sub r1,r2,r1
	sub r1,r1,#2
	add r0,r0,r1
	and r2,r0,#0xFF
	cmp r2,#0xF0
	subge r0,r0,#0x10
	
;	str r0,scrollY
;	ldrb r0,scrollY
	bl_long newY
;	ldrb 
;	subs r0,r0,#1
;	strb r0,scrollY
	ldr pc,midlinehook

;;;	cmp r0,#1
;;;	bleq newY




call_quickhackfinder
	;can destroy m6502_pc safely
	;test for JMP 0 hack
	ldrb r0,[m6502_pc]
	cmp r0,#0x4C
	bne %f0
	mov addy,m6502_pc
	ldrb r0,[m6502_pc,#1]
	ldrb r1,[m6502_pc,#2]
	orr m6502_pc,r0,r1,lsl#8
	encodePC ;destroys r0,r1,r2, not addy
	cmp addy,m6502_pc
	mov m6502_pc,addy
	beq %f1
0
	;jump to quickhackfinder
	mov r0,m6502_pc
	ldr r1,=quickhackfinder
	bx r1
1
	ldr r1,=setjmp0hack
	bx r1


;run
;	ldr pc,=run_core

;----------------------------------------------------------------------------
_xx;	???					;invalid opcode
;----------------------------------------------------------------------------
	[ DEBUG
		adr r0,_xx
		mov r1,#0
		bl debug_
	]
	mov r11,r11
	fetch 2

;----------------------------------------------------------------------------
_4Cz;   JMP
;----------------------------------------------------------------------------
	sub addy,m6502_pc,#1
	ldrb r0,[m6502_pc]
	ldrb r1,[m6502_pc,#1]
	orr m6502_pc,r0,r1,lsl#8
	encodePC
	subs r0,addy,m6502_pc
	;between 0 and 31
	cmp r0,#0
	blt %f0
	cmp r0,#31
	bgt %f0
	mov r0,r0,lsl#2
	ldr r2,=SPEEDHACK_FIND_JMP_BUF
	ldr r1,[r2,r0]
	add r1,r1,#1
	str r1,[r2,r0]
0
	fetch 3


;----------------------------------------------------------------------------
_10z;   BPL
;----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_BPL_BUF
	ldr r2,=_10
	b _find_speedhack_thingy
;----------------------------------------------------------------------------
_30z;   BMI
;----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_BMI_BUF
	ldr r2,=_30
	b _find_speedhack_thingy
;----------------------------------------------------------------------------
_50z;   BVC
;----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_BVC_BUF
	ldr r2,=_50
	b _find_speedhack_thingy
;----------------------------------------------------------------------------
_70z;   BVS
;----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_BVS_BUF
	ldr r2,=_70
	b _find_speedhack_thingy
;----------------------------------------------------------------------------
_90z;   BCC
;----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_BCC_BUF
	ldr r2,=_90
	b _find_speedhack_thingy
;----------------------------------------------------------------------------
_B0z;   BCS
;----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_BCS_BUF
	ldr r2,=_B0
	b _find_speedhack_thingy
;----------------------------------------------------------------------------
_D0z;   BNE
;----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_BNE_BUF
	ldr r2,=_D0
	b _find_speedhack_thingy
;----------------------------------------------------------------------------
_F0z;   BEQ
;----------------------------------------------------------------------------
	ldr r1,=SPEEDHACK_FIND_BEQ_BUF
	ldr r2,=_F0

_find_speedhack_thingy
	ldrsb r0,[m6502_pc]

	;between -33 and -2
	cmp r0,#-33
	bxlt r2
	cmp r0,#-2
	bxgt r2
	rsb r0,r0,#0
	sub r0,r0,#2
	mov r0,r0,lsl#2
	add r0,r0,r1
	ldr r1,[r0]
	add r1,r1,#1
	str r1,[r0]
	bx r2



ntsc_pal_reset
;---NTSC/PAL
	stmfd sp!,{globalptr,lr}
	ldr globalptr,=GLOBAL_PTR_BASE
	
	ldr r0,emuflags
	tst r0,#PALTIMING
	ldreq r1,=256*CYCLE		;NTSC		(113+2/3)*3
	ldrne r1,=240*CYCLE		;PAL		(106+9/16)*3
	str r1,cyclesperscanline1
	ldreq r1,=85*CYCLE		;NTSC		(113+2/3)*3
	ldrne r1,=80*CYCLE		;PAL		(106+9/16)*3
	str r1,cyclesperscanline2
	ldreq r1,=261			;NTSC
	ldrne r1,=311			;PAL
	str r1,lastscanline
	ldreq r1,cyclesperscanline1_modify_ntsc
	ldrne r1,cyclesperscanline1_modify_pal
	ldr r0,=cyclesperscanline1_modify
	str r1,[r0]
	ldreq r1,cyclesperscanline2_modify_ntsc
	ldrne r1,cyclesperscanline2_modify_pal
	ldr r0,=cyclesperscanline2_modify
	str r1,[r0]
	ldreq r1,scroll_threshhold_mod_ntsc
	ldrne r1,scroll_threshhold_mod_pal
	ldr r0,=scroll_threshhold_mod
	str r1,[r0]
	
	
	mov r0,#0
	strb r0,PAL60
	
	ldrb r0,mapper_number
	cmp r0,#69
	IMPORT mapper69_ntsc_pal_reset
	bl mapper69_ntsc_pal_reset
	
	ldmfd sp!,{globalptr,lr}
	bx lr

cyclesperscanline1_modify_ntsc	add cycles,cycles,#256*CYCLE
cyclesperscanline1_modify_pal	add cycles,cycles,#240*CYCLE
cyclesperscanline2_modify_ntsc	add cycles,cycles,#85*CYCLE
cyclesperscanline2_modify_pal	add cycles,cycles,#80*CYCLE
scroll_threshhold_mod_ntsc	cmp r1,#(251-3*3)*CYCLE
scroll_threshhold_mod_pal	cmp r1,#227*CYCLE



cpuhack_reset
	ldr r0,emuflags

	tst r0,#USEPPUHACK
	ldreq r1,=stat_R_simple
	ldrne r1,=stat_R_ppuhack
	str r1,stat_r_simple_func
	
	adr r1,normalops
	eor r0,r0,#NOCPUHACK
	tst r0,#NOCPUHACK	;load opcode set
	ldrb r2,hackflags2
	cmpne r2,#0x4C		;disable default JMP hacks if branch hack is JMP
	adrne r1,jmpops
	ldrb r0,hackflags
	cmp r0,#FindingHacks
	adreq r1,branchops_for_finder
	adr r2,opindex
	mov r3,#8
nr0	ldr r0,[r1,r3,lsl#2]
	ldr r12,[r2,r3,lsl#2]
	str r0,[r12]
	subs r3,r3,#1
	bpl nr0

	ldrb r0,hackflags
	tst r0,#0xF0
	bxeq lr				;No, exit.
	cmp r0,#0x4C
	beq branchhack_jmp
	
	mov r3,r0,lsr#5		;which opcode?
	adr r1,branchops
	ldr r12,[r2,r3,lsl#2]
	ldr r2,[r1,r3,lsl#2]
	str r2,[r12]

	ldrb r0,hackflags2	;how long branches?
	strb r0,[r2,#5*4]

	bx lr
branchhack_jmp
	ldr r12,opindex+8*4
	ldr r2,branchops+8*4
	str r2,[r12]
	ldrb r0,hackflags2
	add r0,r0,#1
	strb r0,[r2]
	bx lr


branchops
	DCD _10y,_30y,_50y,_70y,_90y,_B0y,_D0y,_F0y,_4Cy
branchops_for_finder
	DCD _10z,_30z,_50z,_70z,_90z,_B0z,_D0z,_F0z,_4Cz
normalops
	DCD _10,_30,_50,_70,_90,_B0,_D0,_F0,_4C
jmpops
	DCD _10x,_30x,_50x,_70x,_90x,_B0x,_D0x,_F0x,_4Cx
opindex
	DCD op_table+0x10*4,op_table+0x30*4,op_table+0x50*4,op_table+0x70*4,op_table+0x90*4
	DCD op_table+0xB0*4,op_table+0xD0*4,op_table+0xF0*4,op_table+0x4C*4

;----------------------------------------------------------------------------
CPU_reset	;called by loadcart (r0-r9 are free to use)
;----------------------------------------------------------------------------
	str lr,[sp,#-4]!

;---SRAM setup
	[ CARTSAVE
	ldrb r0,cartflags
	tst r0,#SRAM			;use sram?
	ldrne r1,=sram_W2			;write to cart sram
	strne r1,writemem_tbl+12
	]
;---NTSC/PAL
	bl ntsc_pal_reset
;---cpu reset
	bl cpuhack_reset

	mov m6502_a,#0
	mov m6502_x,#0
	mov m6502_y,#0
	mov m6502_nz,#0
	adr m6502_rmem,readmem_tbl
	ldr r0,=NES_RAM+0x100
	str r0,m6502_s		;S=0xFD (0x100-3)
	mov cycles,#0		;D=0, C=0, V=0, I=1 disable IRQ.

	str m6502_a,frame		;frame count reset

	;(clear irq/nmi/res source)...

	mov r0,#0x40
	strb r0,apu_4017
	mov r0,#0
	strb r0,doframeirq

	ldr r12,=RES_VECTOR
	bl_long Vec6502

	adr r0,cpuregs
	stmia r0,{m6502_nz-m6502_pc}
	ldr pc,[sp],#4
;----------------------------------------------------------
	AREA wram_globals0, CODE, READWRITE
GLOBAL_PTR_BASE
op_table
;	DCD _00,_01,_xx,_xx,_x3,_05,_06,_07,_08,_09,_0A,_xx,_xx,_0D,_0E,_0F
;	DCD _10,_11,_xx,_xx,_x4,_15,_16,_17,_18,_19,_xx,_1B,_xx,_1D,_1E,_1F
	DCD _00,_01,_xx,_xx,_x3,_05,_06,_xx,_08,_09,_0A,_xx,_xx,_0D,_0E,_xx
	DCD _10,_11,_xx,_xx,_x4,_15,_16,_xx,_18,_19,_xx,_xx,_xx,_1D,_1E,_xx
	DCD _20,_21,_xx,_xx,_24,_25,_26,_xx,_28,_29,_2A,_xx,_2C,_2D,_2E,_xx
	DCD _30,_31,_xx,_xx,_x4,_35,_36,_xx,_38,_39,_xx,_xx,_xx,_3D,_3E,_xx
	DCD _40,_41,_xx,_xx,_x3,_45,_46,_xx,_48,_49,_4A,_xx,_4C,_4D,_4E,_xx
	DCD _50,_51,_xx,_xx,_x4,_55,_56,_xx,_58,_59,_xx,_xx,_xx,_5D,_5E,_xx
	DCD _60,_61,_xx,_xx,_x3,_65,_66,_xx,_68,_69,_6A,_xx,_6C,_6D,_6E,_xx
	DCD _70,_71,_xx,_xx,_x4,_75,_76,_xx,_78,_79,_xx,_xx,_xx,_7D,_7E,_xx
	DCD _x2,_81,_x2,_xx,_84,_85,_86,_xx,_88,_x2,_8A,_xx,_8C,_8D,_8E,_xx
	DCD _90,_91,_xx,_xx,_94,_95,_96,_xx,_98,_99,_9A,_xx,_xx,_9D,_xx,_xx
	DCD _A0,_A1,_A2,_xx,_A4,_A5,_A6,_xx,_A8,_A9,_AA,_xx,_AC,_AD,_AE,_xx
	DCD _B0,_B1,_xx,_B3,_B4,_B5,_B6,_xx,_B8,_B9,_BA,_xx,_BC,_BD,_BE,_xx
	DCD _C0,_C1,_x2,_xx,_C4,_C5,_C6,_xx,_C8,_C9,_CA,_xx,_CC,_CD,_CE,_xx
	DCD _D0,_D1,_xx,_xx,_x4,_D5,_D6,_xx,_D8,_D9,_xx,_xx,_xx,_DD,_DE,_xx
	DCD _E0,_E1,_x2,_xx,_E4,_E5,_E6,_xx,_E8,_E9,_EA,_xx,_EC,_ED,_EE,_xx
	DCD _F0,_F1,_xx,_xx,_x4,_F5,_F6,_xx,_F8,_F9,_xx,_xx,_xx,_FD,_FE,_xx
	EXPORT g_readmem_tbl
g_readmem_tbl
  ;readmem_tbl
	DCD ram_R	;$0000
	DCD PPU_R	;$2000
	DCD IO_R	;$4000
	DCD sram_R	;$6000
	DCD rom_R80	;$8000
	DCD rom_RA0	;$A000
	DCD rom_RC0	;$C000
	DCD rom_RE0	;$E000
g_writemem_tbl
  ;writemem_tbl
	DCD ram_W	;$0000
	DCD PPU_W	;$2000
	DCD IO_W	;$4000
	DCD sram_W	;$6000
	DCD void	;$8000
	DCD void	;$A000
	DCD void	;$C000
	DCD void	;$E000
g_memmap_tbl
   ;memmap_tbl
	DCD NES_RAM		;$0000   0000-7fff
	DCD NES_RAM		;$2000    should
	DCD NES_RAM		;$4000     never
	DCD NES_RAM-0x5800	;$6000      change
rommap	% 4*4			;$8000-FFFF

cpustate
	;group these together for save/loadstate
	% 6*4 ;cpuregs (nz,READMEM_TBL,a,x,y,cycles)
g_m6502_pc
	DCD 0 ;m6502_pc
g_m6502_s
	DCD 0 ;m6502_s:
frametotal		;let ui.c see frame count for savestates
	DCD 0 ;frame
g_scanline
	DCD 0 ;scanline
g_lastbank
	DCD 0 ;lastbank: last memmap added to PC (used to calculate current PC)
	DCD 0 ;nexttimeout:  jump here when cycles runs out
	DCD 0 ;line_end_timeout
	DCD 0 ;line_mid_timeout
	DCD 0 ;scanlinehook
	DCD 0 ;midlinehook
	DCD 0 ;cyclesperscanline1 (256*CYCLE or 240*CYCLE)  (total is 341/320)
	DCD 0 ;cyclesperscanline2 (85*CYCLE or 80*CYCLE)
	DCD 0 ;lastscanline (261 or 311)
	DCB 0 ;midscanline
dontstop	DCB 0 ;_dontstop
g_hackflags3	DCB 0 ;hackflags3
	DCB 0 ;ppuctrl1_startframe
;----------------------------------------------------------------------------
	END


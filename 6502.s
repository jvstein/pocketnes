	AREA wram_code0, CODE, READWRITE

	INCLUDE equates.h
	INCLUDE 6502mac.h
	INCLUDE cart.h
	INCLUDE memory.h
	INCLUDE io.h
	INCLUDE ppu.h

	IMPORT |wram_globals0$$Base|
	IMPORT ui	;from ui.c

	EXPORT nes_reset
	EXPORT run
	EXPORT op_table
	EXPORT default_scanlinehook
	EXPORT irq6502
	EXPORT agb_vbl
	EXPORT cpustate
	EXPORT rommap
;----------------------------------------------------------------------------
_xx;	???					;invalid opcode
;----------------------------------------------------------------------------
	[ DEBUG
		adr r0,_xx
		mov r1,#0
		bl debug_
	]
	fetch 2
;----------------------------------------------------------------------------
_00;   BRK
;----------------------------------------------------------------------------
	[ DEBUG
		adr r0,_00
		mov r1,#0
		bl debug_
	]

	ldr r0,lastbank
	sub r1,nes_pc,r0
	add r0,r1,#1
	push16			;save PC

	encodeP (B+R)		;save P
	push8 r0

	ldr r1,nes_di
	orr r1,r1,#I		;disable IRQ
	str r1,nes_di

	ldr r0,memmap_tbl+7*4
	ldr r1,=IRQ_VECTOR
	ldrb nes_pc,[r0,r1]!
	ldrb r2,[r0,#1]
	orr nes_pc,nes_pc,r2,lsl#8
	encodePC		;get BRK vector

	fetch 7
	LTORG
;----------------------------------------------------------------------------
_01;   ORA ($xx,X)
;----------------------------------------------------------------------------
	doIIX
	opORA
	fetch 6
;----------------------------------------------------------------------------
_05;   ORA $xx
;----------------------------------------------------------------------------
	doZ
	opORA
	fetch 3
;----------------------------------------------------------------------------
_06;   ASL $xx
;----------------------------------------------------------------------------
	doZ
	opASL
	fetch 5
;----------------------------------------------------------------------------
_08;   PHP
;----------------------------------------------------------------------------
	encodeP (B+R)
	push8 r0
	fetch 3
;----------------------------------------------------------------------------
_09;   ORA #$xx
;----------------------------------------------------------------------------
	doIMM
	opORA
	fetch 2
;----------------------------------------------------------------------------
_0A;   ASL
;----------------------------------------------------------------------------
	and nes_a,nes_a,#0xff000000
	movs nes_a,nes_a,lsl#1
	orr nes_nz,nes_a,nes_a,lsr#24
	mrs nes_c,cpsr
	fetch 2
;----------------------------------------------------------------------------
_0D;   ORA $xxxx
;----------------------------------------------------------------------------
	doABS
	opORA
	fetch 4
;----------------------------------------------------------------------------
_0E;   ASL $xxxx
;----------------------------------------------------------------------------
	doABS
	opASL
	fetch 6
;----------------------------------------------------------------------------
_10x;   BPL
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_10
	tst nes_nz,#0x80000000
	bne nobranch
	ldrsb r0,[nes_pc],#1
	add nes_pc,nes_pc,r0
	fetch 3
nobranch
	add nes_pc,nes_pc,#1
	fetch 2
;----------------------------------------------------------------------------
_11;   ORA ($xx),Y
;----------------------------------------------------------------------------
	doIIY
	opORA
	fetch 5
;----------------------------------------------------------------------------
_15;   ORA $xx,X
;----------------------------------------------------------------------------
	doZIX
	opORA
	fetch 4
;----------------------------------------------------------------------------
_16;   ASL $xx,X
;----------------------------------------------------------------------------
	doZIX
	opASL
	fetch 6
;----------------------------------------------------------------------------
_18;   CLC
;----------------------------------------------------------------------------
	mov nes_c,#0
	fetch 2
;----------------------------------------------------------------------------
_19;   ORA $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opORA
	fetch 4
;----------------------------------------------------------------------------
_1D;   ORA $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opORA
	fetch 4
;----------------------------------------------------------------------------
_1E;   ASL $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opASL
	fetch 7
;----------------------------------------------------------------------------
_20;   JSR $xxxx
;----------------------------------------------------------------------------
	ldrb r2,[nes_pc],#1
	ldr r1,lastbank
	sub r0,nes_pc,r1
	ldrb r1,[nes_pc]
	orr nes_pc,r2,r1,lsl#8
	push16
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_21;   AND ($xx,X)
;----------------------------------------------------------------------------
	doIIX
	opAND
	fetch 6
;----------------------------------------------------------------------------
_24;   BIT $xx
;----------------------------------------------------------------------------
	doZ
	opBIT
	fetch 3
;----------------------------------------------------------------------------
_25;   AND $xx
;----------------------------------------------------------------------------
	doZ
	opAND
	fetch 3
;----------------------------------------------------------------------------
_26;   ROL $xx
;----------------------------------------------------------------------------
	doZ
	opROL
	fetch 5
;----------------------------------------------------------------------------
_28;   PLP
;----------------------------------------------------------------------------
	pop8 r0
	decodeP
	fetch 4
;----------------------------------------------------------------------------
_29;   AND #$xx
;----------------------------------------------------------------------------
	doIMM
	opAND
	fetch 2
;----------------------------------------------------------------------------
_2A;   ROL
;----------------------------------------------------------------------------
	msr cpsr_f,nes_c	;get C
	mov r0,nes_a,lsr#24
	adc r0,r0,r0
	orr nes_nz,r0,r0,lsl#24
	mov nes_a,r0,lsl#24
	mov nes_c,r0,lsl#21	;C
	fetch 2
;----------------------------------------------------------------------------
_2C;   BIT $xxxx
;----------------------------------------------------------------------------
	doABS
	opBIT
	fetch 4
;----------------------------------------------------------------------------
_2D;   AND $xxxx
;----------------------------------------------------------------------------
	doABS
	opAND
	fetch 4
;----------------------------------------------------------------------------
_2E;   ROL $xxxx
;----------------------------------------------------------------------------
	doABS
	opROL
	fetch 6
;----------------------------------------------------------------------------
_30x;   BMI
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_30
	tst nes_nz,#0x80000000
	beq nobranch
	ldrsb r0,[nes_pc],#1
	add nes_pc,nes_pc,r0
	fetch 3
;----------------------------------------------------------------------------
_31;   AND ($xx),Y
;----------------------------------------------------------------------------
	doIIY
	opAND
	fetch 5
;----------------------------------------------------------------------------
_35;   AND $xx,X
;----------------------------------------------------------------------------
	doZIX
	opAND
	fetch 4
;----------------------------------------------------------------------------
_36;   ROL $xx,X
;----------------------------------------------------------------------------
	doZIX
	opROL
	fetch 6
;----------------------------------------------------------------------------
_38;   SEC
;----------------------------------------------------------------------------
	mov nes_c,#PSR_C
	fetch 2
;----------------------------------------------------------------------------
_39;   AND $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opAND
	fetch 4
;----------------------------------------------------------------------------
_3D;   AND $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opAND
	fetch 4
;----------------------------------------------------------------------------
_3E;   ROL $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opROL
	fetch 7
;----------------------------------------------------------------------------
_40;   RTI
;----------------------------------------------------------------------------
	pop8 r0		;pop 6502 flags and decode
	decodeP
	pop16		;pop the return address
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_41;   EOR ($xx,X)
;----------------------------------------------------------------------------
	doIIX
	opEOR
	fetch 6
;----------------------------------------------------------------------------
_45;   EOR $xx
;----------------------------------------------------------------------------
	doZ
	opEOR
	fetch 3
;----------------------------------------------------------------------------
_46;   LSR $xx
;----------------------------------------------------------------------------
	doZ
	opLSR
	fetch 5
;----------------------------------------------------------------------------
_48;   PHA
;----------------------------------------------------------------------------
	mov r0,nes_a,lsr#24
	push8 r0
	fetch 3
;----------------------------------------------------------------------------
_49;   EOR #$xx
;----------------------------------------------------------------------------
	doIMM
	opEOR
	fetch 2
;----------------------------------------------------------------------------
_4A;   LSR
;----------------------------------------------------------------------------
	mov nes_c,nes_a,lsl#5
	mov nes_nz,nes_a,lsr#25
	mov nes_a,nes_a,lsr#1
	fetch 2
;----------------------------------------------------------------------------
_4C;   JMP $xxxx
;----------------------------------------------------------------------------
	ldrb r0,[nes_pc],#1
	ldrb r1,[nes_pc]
	orr nes_pc,r0,r1,lsl#8
	encodePC
	fetch 3
;----------------------------------------------------------------------------
_4Cx;   JMP $xxxx
;----------------------------------------------------------------------------
	ldrb r0,[nes_pc],#1
	ldrb r1,[nes_pc]
	orr nes_pc,r0,r1,lsl#8
		tst cycles,#BRANCH
		beq checkdeadloop
		bic cycles,cycles,#BRANCH
fini
	encodePC
	fetch 3
checkdeadloop 		;if thisjumpaddr=lastjumpaddr, cycles=0
		ldr addy,lastjump
		cmp addy,nes_pc
		moveq cycles,#0
		strne nes_pc,lastjump
		b fini
lastjump DCD 0
;----------------------------------------------------------------------------
_4D;   EOR $xxxx
;----------------------------------------------------------------------------
	doABS
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_4E;   LSR $xxxx
;----------------------------------------------------------------------------
	doABS
	opLSR
	fetch 6
;----------------------------------------------------------------------------
_50x;   BVC
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_50
	ldr r0,nes_v
	tst r0,#PSR_V
	bne nobranch
	ldrsb r0,[nes_pc],#1
	add nes_pc,nes_pc,r0
	fetch 3
;----------------------------------------------------------------------------
_51;   EOR ($xx),Y
;----------------------------------------------------------------------------
	doIIY
	opEOR
	fetch 5
;----------------------------------------------------------------------------
_55;   EOR $xx,X
;----------------------------------------------------------------------------
	doZIX
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_56;   LSR $xx,X
;----------------------------------------------------------------------------
	doZIX
	opLSR
	fetch 6
;----------------------------------------------------------------------------
_58;   CLI
;----------------------------------------------------------------------------
	ldr r0,nes_di
	bic r0,r0,#I
	str r0,nes_di
	fetch 2
;----------------------------------------------------------------------------
_59;   EOR $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_5D;   EOR $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opEOR
	fetch 4
;----------------------------------------------------------------------------
_5E;   LSR $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opLSR
	fetch 7
;----------------------------------------------------------------------------
_60;   RTS
;----------------------------------------------------------------------------
	pop16
	add nes_pc,nes_pc,#1
	encodePC
	fetch 6
;----------------------------------------------------------------------------
_61;   ADC ($xx,X)
;----------------------------------------------------------------------------
	doIIX
	opADC
	fetch 6
;----------------------------------------------------------------------------
_65;   ADC $xx
;----------------------------------------------------------------------------
	doZ
	opADC
	fetch 3
;----------------------------------------------------------------------------
_66;   ROR $xx
;----------------------------------------------------------------------------
	doZ
	opROR
	fetch 5
;----------------------------------------------------------------------------
_68;   PLA
;----------------------------------------------------------------------------
	pop8 r0
	mov nes_a,r0,lsl#24
	add nes_nz,nes_a,nes_a,lsr#24
	fetch 4
;----------------------------------------------------------------------------
_69;   ADC #$xx
;----------------------------------------------------------------------------
	doIMM
	opADC
	fetch 2
;----------------------------------------------------------------------------
_6A;   ROR
;----------------------------------------------------------------------------
	msr cpsr_f,nes_c
	mov nes_a,nes_a,rrx
	mov nes_c,nes_a,lsl#6
	mov nes_nz,nes_a,asr#24
	fetch 2
;----------------------------------------------------------------------------
_6C;   JMP ($xxxx)
;----------------------------------------------------------------------------
	doABS
	adr r1,memmap_tbl
	mov r2,addy,lsr#13
	ldr r1,[r1,r2,lsl#2]
	ldrb nes_pc,[r1,addy]
	add addy,addy,#1
	ldrb r0,[r1,addy]
	orr nes_pc,nes_pc,r0,lsl#8
	encodePC
	fetch 5
;----------------------------------------------------------------------------
_6D;   ADC $xxxx
;----------------------------------------------------------------------------
	doABS
	opADC
	fetch 4
;----------------------------------------------------------------------------
_6E;   ROR $xxxx
;----------------------------------------------------------------------------
	doABS
	opROR
	fetch 6
;----------------------------------------------------------------------------
_70x;   BVS
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_70
	ldr r0,nes_v
	tst r0,#PSR_V
	beq nobranch
	ldrsb r0,[nes_pc],#1
	add nes_pc,nes_pc,r0
	fetch 3
;----------------------------------------------------------------------------
_71;   ADC ($xx),Y
;----------------------------------------------------------------------------
	doIIY
	opADC
	fetch 5
;----------------------------------------------------------------------------
_75;   ADC $xx,X
;----------------------------------------------------------------------------
	doZIX
	opADC
	fetch 4
;----------------------------------------------------------------------------
_76;   ROR $xx,X
;----------------------------------------------------------------------------
	doZIX
	opROR
	fetch 6
;----------------------------------------------------------------------------
_78;   SEI
;----------------------------------------------------------------------------
	ldr r0,nes_di
	orr r0,r0,#I
	str r0,nes_di
	fetch 2
;----------------------------------------------------------------------------
_79;   ADC $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opADC
	fetch 4
;----------------------------------------------------------------------------
_7D;   ADC $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opADC
	fetch 4
;----------------------------------------------------------------------------
_7E;   ROR $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opROR
	fetch 7
;----------------------------------------------------------------------------
_81;   STA ($xx,X)
;----------------------------------------------------------------------------
	doIIX
	opSTA
	fetch 6
;----------------------------------------------------------------------------
_84;   STY $xx
;----------------------------------------------------------------------------
	doZ
	opSTY
	fetch 3
;----------------------------------------------------------------------------
_85;   STA $xx
;----------------------------------------------------------------------------
	doZ
	opSTA
	fetch 3
;----------------------------------------------------------------------------
_86;   STX $xx
;----------------------------------------------------------------------------
	doZ
	opSTX
	fetch 3
;----------------------------------------------------------------------------
_88;   DEY
;----------------------------------------------------------------------------
	sub nes_y,nes_y,#1
	and nes_y,nes_y,#0xff
	add nes_nz,nes_y,nes_y,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_8A;   TXA
;----------------------------------------------------------------------------
	mov nes_a,nes_x,lsl#24
	add nes_nz,nes_x,nes_x,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_8C;   STY $xxxx
;----------------------------------------------------------------------------
	doABS
	opSTY
	fetch 4
;----------------------------------------------------------------------------
_8D;   STA $xxxx
;----------------------------------------------------------------------------
	doABS
	opSTA
	fetch 4
;----------------------------------------------------------------------------
_8E;   STX $xxxx
;----------------------------------------------------------------------------
	doABS
	opSTX
	fetch 4
;----------------------------------------------------------------------------
_90x;   BCC
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_90
	tst nes_c,#PSR_C
	bne nobranch
	ldrsb r0,[nes_pc],#1
	add nes_pc,nes_pc,r0
	fetch 3
;----------------------------------------------------------------------------
_91;   STA ($xx),Y
;----------------------------------------------------------------------------
	doIIY
	opSTA
	fetch 6
;----------------------------------------------------------------------------
_94;   STY $xx,X
;----------------------------------------------------------------------------
	doZIX
	opSTY
	fetch 4
;----------------------------------------------------------------------------
_95;   STA $xx,X
;----------------------------------------------------------------------------
	doZIX
	opSTA
	fetch 4
;----------------------------------------------------------------------------
_96;   STX $xx,Y
;----------------------------------------------------------------------------
	doZIY
	opSTX
	fetch 4
;----------------------------------------------------------------------------
_98;   TYA
;----------------------------------------------------------------------------
	mov nes_a,nes_y,lsl#24
	add nes_nz,nes_y,nes_y,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_99;   STA $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opSTA
	fetch 5
;----------------------------------------------------------------------------
_9A;   TXS
;----------------------------------------------------------------------------
	add r0,nes_zpage,#0x100
	add r0,r0,nes_x
	str r0,nes_s
	fetch 2
;----------------------------------------------------------------------------
_9D;   STA $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opSTA
	fetch 5
;----------------------------------------------------------------------------
_A0;   LDY #$xx
;----------------------------------------------------------------------------
	doIMM
	opLDY
	fetch 2
;----------------------------------------------------------------------------
_A1;   LDA ($xx,X)
;----------------------------------------------------------------------------
	doIIX
	opLDA
	fetch 6
;----------------------------------------------------------------------------
_A2;   LDX #$xx
;----------------------------------------------------------------------------
	doIMM
	opLDX
	fetch 2
;----------------------------------------------------------------------------
_A4;   LDY $xx
;----------------------------------------------------------------------------
	doZ
	opLDY
	fetch 3
;----------------------------------------------------------------------------
_A5;   LDA $xx
;----------------------------------------------------------------------------
	doZ
	opLDA
	fetch 3
;----------------------------------------------------------------------------
_A6;   LDX $xx
;----------------------------------------------------------------------------
	doZ
	opLDX
	fetch 3
;----------------------------------------------------------------------------
_A8;   TAY
;----------------------------------------------------------------------------
	mov nes_y,nes_a,lsr#24
	add nes_nz,nes_y,nes_y,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_A9;   LDA #$xx
;----------------------------------------------------------------------------
	doIMM
	opLDA
	fetch 2
;----------------------------------------------------------------------------
_AA;   TAX
;----------------------------------------------------------------------------
	mov nes_x,nes_a,lsr#24
	add nes_nz,nes_x,nes_x,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_AC;   LDY $xxxx
;----------------------------------------------------------------------------
	doABS
	opLDY
	fetch 4
;----------------------------------------------------------------------------
_AD;   LDA $xxxx
;----------------------------------------------------------------------------
	doABS
	opLDA
	fetch 4
;----------------------------------------------------------------------------
_AE;   LDX $xxxx
;----------------------------------------------------------------------------
	doABS
	opLDX
	fetch 4
;----------------------------------------------------------------------------
_B0x;   BCS
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_B0
	tst nes_c,#PSR_C
	beq nobranch
	ldrsb r0,[nes_pc],#1
	add nes_pc,nes_pc,r0
	fetch 3
;----------------------------------------------------------------------------
_B1;   LDA ($xx),Y
;----------------------------------------------------------------------------
	doIIY
	opLDA
	fetch 5
;----------------------------------------------------------------------------
_B4;   LDY $xx,X
;----------------------------------------------------------------------------
	doZIX
	opLDY
	fetch 4
;----------------------------------------------------------------------------
_B5;   LDA $xx,X
;----------------------------------------------------------------------------
	doZIX
	opLDA
	fetch 4
;----------------------------------------------------------------------------
_B6;   LDX $xx,Y
;----------------------------------------------------------------------------
	doZIY
	opLDX
	fetch 4
;----------------------------------------------------------------------------
_B8;   CLV
;----------------------------------------------------------------------------
	mov r0,#0
	str r0,nes_v
	fetch 2
;----------------------------------------------------------------------------
_B9;   LDA $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opLDA
	fetch 4
;----------------------------------------------------------------------------
_BA;   TSX
;----------------------------------------------------------------------------
	ldr r0,nes_s
	and nes_x,r0,#0xff
	add nes_nz,nes_x,nes_x,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_BC;   LDY $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opLDY
	fetch 4
;----------------------------------------------------------------------------
_BD;   LDA $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opLDA
	fetch 4
;----------------------------------------------------------------------------
_BE;   LDX $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opLDX
	fetch 4
;----------------------------------------------------------------------------
_C0;   CPY #$xx
;----------------------------------------------------------------------------
	doIMM
	opCPY
	fetch 2
;----------------------------------------------------------------------------
_C1;   CMP ($xx,X)
;----------------------------------------------------------------------------
	doIIX
	opCMP
	fetch 6
;----------------------------------------------------------------------------
_C4;   CPY $xx
;----------------------------------------------------------------------------
	doZ
	opCPY
	fetch 3
;----------------------------------------------------------------------------
_C5;   CMP $xx
;----------------------------------------------------------------------------
	doZ
	opCMP
	fetch 3
;----------------------------------------------------------------------------
_C6;   DEC $xx
;----------------------------------------------------------------------------
	doZ
	opDEC
	fetch 5
;----------------------------------------------------------------------------
_C8;   INY
;----------------------------------------------------------------------------
	add nes_y,nes_y,#1
	and nes_y,nes_y,#0xff
	add nes_nz,nes_y,nes_y,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_C9;   CMP #$xx
;----------------------------------------------------------------------------
	doIMM
	opCMP
	fetch 2
;----------------------------------------------------------------------------
_CA;   DEX
;----------------------------------------------------------------------------
	sub nes_x,nes_x,#1
	and nes_x,nes_x,#0xff
	add nes_nz,nes_x,nes_x,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_CC;   CPY $xxxx
;----------------------------------------------------------------------------
	doABS
	opCPY
	fetch 4
;----------------------------------------------------------------------------
_CD;   CMP $xxxx
;----------------------------------------------------------------------------
	doABS
	opCMP
	fetch 4
;----------------------------------------------------------------------------
_CE;   DEC $xxxx
;----------------------------------------------------------------------------
	doABS
	opDEC
	fetch 6
;----------------------------------------------------------------------------
_D0x;   BNE
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_D0
	tst nes_nz,#0xff
	beq nobranch
	ldrsb r0,[nes_pc],#1
	add nes_pc,nes_pc,r0
	fetch 3
;----------------------------------------------------------------------------
_D1;   CMP ($xx),Y
;----------------------------------------------------------------------------
	doIIY
	opCMP
	fetch 5
;----------------------------------------------------------------------------
_D5;   CMP $xx,X
;----------------------------------------------------------------------------
	doZIX
	opCMP
	fetch 4
;----------------------------------------------------------------------------
_D6;   DEC $xx,X
;----------------------------------------------------------------------------
	doZIX
	opDEC
	fetch 6
;----------------------------------------------------------------------------
_D8;   CLD
;----------------------------------------------------------------------------
	ldr r0,nes_di
	bic r0,r0,#D
	str r0,nes_di
	fetch 2
;----------------------------------------------------------------------------
_D9;   CMP $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opCMP
	fetch 4
;----------------------------------------------------------------------------
_DD;   CMP $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opCMP
	fetch 4
;----------------------------------------------------------------------------
_DE;   DEC $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opDEC
	fetch 7
;----------------------------------------------------------------------------
_E0;   CPX #$xx
;----------------------------------------------------------------------------
	doIMM
	opCPX
	fetch 2
;----------------------------------------------------------------------------
_E1;   SBC ($xx,X)
;----------------------------------------------------------------------------
	doIIX
	opSBC
	fetch 6
;----------------------------------------------------------------------------
_E4;   CPX $xx
;----------------------------------------------------------------------------
	doZ
	opCPX
	fetch 3
;----------------------------------------------------------------------------
_E5;   SBC $xx
;----------------------------------------------------------------------------
	doZ
	opSBC
	fetch 3
;----------------------------------------------------------------------------
_E6;   INC $xx
;----------------------------------------------------------------------------
	doZ
	opINC
	fetch 5
;----------------------------------------------------------------------------
_E8;   INX
;----------------------------------------------------------------------------
	add nes_x,nes_x,#1
	and nes_x,nes_x,#0xff
	add nes_nz,nes_x,nes_x,lsl#24
	fetch 2
;----------------------------------------------------------------------------
_E9;   SBC #$xx
;----------------------------------------------------------------------------
	doIMM
	opSBC
	fetch 2
;----------------------------------------------------------------------------
_EA;   NOP
;----------------------------------------------------------------------------
	fetch 2
;----------------------------------------------------------------------------
_EC;   CPX $xxxx
;----------------------------------------------------------------------------
	doABS
	opCPX
	fetch 4
;----------------------------------------------------------------------------
_ED;   SBC $xxxx
;----------------------------------------------------------------------------
	doABS
	opSBC
	fetch 4
;----------------------------------------------------------------------------
_EE;   INC $xxxx
;----------------------------------------------------------------------------
	doABS
	opINC
	fetch 6
;----------------------------------------------------------------------------
_F0x;   BEQ
;----------------------------------------------------------------------------
	orr cycles,cycles,#BRANCH
_F0
	tst nes_nz,#0xff
	bne nobranch
	ldrsb r0,[nes_pc],#1
	add nes_pc,nes_pc,r0
	fetch 3
;----------------------------------------------------------------------------
_F1;   SBC ($xx),Y
;----------------------------------------------------------------------------
	doIIY
	opSBC
	fetch 5
;----------------------------------------------------------------------------
_F5;   SBC $xx,X
;----------------------------------------------------------------------------
	doZIX
	opSBC
	fetch 4
;----------------------------------------------------------------------------
_F6;   INC $xx,X
;----------------------------------------------------------------------------
	doZIX
	opINC
	fetch 6
;----------------------------------------------------------------------------
_F8;   SED
;----------------------------------------------------------------------------
	ldr r0,nes_di
	orr r0,r0,#D
	str r0,nes_di
	fetch 2
;----------------------------------------------------------------------------
_F9;   SBC $xxxx,Y
;----------------------------------------------------------------------------
	doAIY
	opSBC
	fetch 4
;----------------------------------------------------------------------------
_FD;   SBC $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opSBC
	fetch 4
;----------------------------------------------------------------------------
_FE;   INC $xxxx,X
;----------------------------------------------------------------------------
	doAIX
	opINC
	fetch 7
;----------------------------------------------------------------------------
run	;r0=0 to return after frame
;----------------------------------------------------------------------------
	str r0,dontstop
	tst r0,#1
	stmeqfd sp!,{nes_nz-nes_pc,globalptr,nes_zpage,lr}

	ldr globalptr,=|wram_globals0$$Base|
	ldr nes_zpage,=NES_RAM
	b line0x
;----------------------------------------------------------------------------
;cycles ran out
;----------------------------------------------------------------------------
line0
	adr r2,cpuregs
	stmia r2,{nes_nz-nes_pc}	;save 6502 state

	ldr r1,=REG_P1		;refresh input every frame
	ldrh r0,[r1]
	eor r0,r0,#0xff
	ldr r1,AGBjoypad
	eor r1,r1,r0
	and r1,r1,r0
	str r0,AGBjoypad

	ldr r3,hackflags
	tst r3,#NOSCALING
	beq %F0
	ldr r3,windowtop
	tst r0,#0x100		;R scroll
	addeq r3,r3,#1
	cmp r3,#79
	movhi r3,#79
	tst r0,#0x200		;L scroll
	subeqs r3,r3,#1
	movmi r3,#0
	str r3,windowtop
0
	ldr r2,dontstop
	cmp r2,#0
	ldmeqfd sp!,{nes_nz-nes_pc,globalptr,nes_zpage,pc}	;exit here if doing single frame

	tst r0,#0x200		;L
	bne %F0
		tst r1,#0x04	;+SEL
		ldrne r2,adjustblend
		addne r2,r2,#1
		strne r2,adjustblend
0
	tst r0,#0x300		;L+R?
	bne line0x
	str r3,[sp,#-4]!
	bl ui
	ldr r3,[sp],#4
line0x
	ldrb r0,ppuctrl0
	strb r0,ppuctrl0frame		;Contra likes this

	mov r1,#0
	strb r1,ppustat		;vbl clear, sprite0 clear
	str r1,scanline		;reset scanline count

	bl newframe

 [ DEBUG
	ldrb r0,agb_vbl
	cmp r0,#0
	beq l01
	ldr r0,vblmiss
	add r0,r0,#1		;count # of VBL misses
	str r0,vblmiss
	mov r1,#19
	bl debug_
	mov r1,#0
 ]
l01
	ldrb r0,agb_vbl		;wait for AGB VBL
	cmp r0,#0
	beq l01
	mov r1,#0
	strb r1,agb_vbl

 [ DEBUG
	mov r1,#REG_BASE
	mov r0,#0x0000
	strh r0,[r1,#REG_BLDMOD]	;stop profiling shite
 ]
	adr r0,cpuregs
	ldmia r0,{nes_nz-nes_pc}	;restore 6502 state

	ldr r0,=341*CYCLE
	add cycles,cycles,r0
	adr r0,line1_240
	str r0,nexttimeout

	ldr pc,scanlinehook
line1_240 ;------------------------
	ldr r0,=341*CYCLE
	add cycles,cycles,r0

	ldr r1,scanline
	add r1,r1,#1
	str r1,scanline
	cmp r1,#240
	adreq addy,line241
	streq addy,nexttimeout

	ldr pc,scanlinehook
line241 ;---------------------------
	ldr r0,frame
	add r0,r0,#1
	str r0,frame
 [ DEBUG
	ldrb r0,hackflags			;darken screen during NES vblank
	tst r0,#PROFILING
	beq %F0
	mov r1,#REG_BASE
	mov r0,#0x00f1
	strh r0,[r1,#REG_BLDMOD]
	mov r0,#0x0003
	strh r0,[r1,#REG_COLY]
	ldrh r0,[r1,#REG_VCOUNT]
	mov r1,#18
	bl debug_
0
 ]
	mov r1,#0x80
	strb r1,ppustat		;vbl flag

	ldrb r0,ppuctrl0
	tst r0,#0x80
	beq %F0			;NMI?

	ldr r1,lastbank
	sub r0,nes_pc,r1
	push16					;save PC

	encodeP (R)				;save P
	push8 r0

	ldr r1,nes_di
	orr r1,r1,#I				;disable IRQ
	str r1,nes_di

	ldr r0,memmap_tbl+7*4	;JMP [NMI]
	ldr r1,=NMI_VECTOR
	ldrb nes_pc,[r0,r1]!
	ldrb r2,[r0,#1]
	orr nes_pc,nes_pc,r2,lsl#8
	encodePC
	sub cycles,cycles,#3*7*CYCLE
0
	ldr r0,=341*CYCLE
	add cycles,cycles,r0
	adr r1,line242_261
	str r1,nexttimeout

	mov r0,#241
	str r0,scanline

	ldr pc,scanlinehook
line242_261 ;------------------------
	ldr r0,=341*CYCLE
	add cycles,cycles,r0

	ldr r1,scanline
	add r1,r1,#1
	str r1,scanline
	sub r1,r1,#200
	cmp r1,#61	;)
	adreq addy,line0
	streq addy,nexttimeout

	ldr pc,scanlinehook

default_scanlinehook
	fetch 0
;----------------------------------------------------------
irq6502
;----------------------------------------------------------
	ldrb r0,nes_di
	tst r0,#I
	bne default_scanlinehook		;we dont want no stinkin irqs

	ldr r0,lastbank
	sub r0,nes_pc,r0
	push16					;save PC

	encodeP (R)				;save P
	push8 r0

	ldrb r1,nes_di
	orr r1,r1,#I				;disable IRQ
	strb r1,nes_di

	ldr r0,memmap_tbl+7*4
	ldr r1,=IRQ_VECTOR
	ldrb nes_pc,[r0,r1]!
	ldrb r2,[r0,#1]
	orr nes_pc,nes_pc,r2,lsl#8
	encodePC				;get IRQ vector

	fetch 7
;----------------------------------------------------------------------------
dontstop DCD 0
agb_vbl DCB 0		;nonzero when AGB enters vblank
 [ DEBUG
vblmiss DCD 0
 ]
;----------------------------------------------------------------------------
	AREA rom_code, CODE, READONLY

nes_reset	;called by loadcart (r0-r9 are free to use)
;----------------------------------------------------------------------------
	mov addy,lr

	bl IO_reset_
	bl ppureset_
;---SRAM setup
	ldr r0,hackflags
	tst r0,#0xff000000		;use flash cart sram?
	ldreq r1,=sram_W
	ldrne r1,=sram_W2		;allow writes to cart sram
	str r1,writemem_tbl+12
;---cpu reset
	tst r0,#NOCPUHACK	;load opcode set
	adr r1,jmpops
	adrne r1,normalops
	adr r3,opindex
	mov r4,#8
nr0	ldr r5,[r1,r4,lsl#2]
	ldr r6,[r3,r4,lsl#2]
	str r5,[r6]
	subs r4,r4,#1
	bpl nr0

	mov nes_a,#0
	mov nes_x,#0
	mov nes_y,#0
	mov nes_nz,#0
	mov nes_c,#0
	str nes_a,nes_v
	mov r0,#I		;D=0, disable IRQ
	str r0,nes_di
	ldr r0,=NES_RAM+0x1ff
	str r0,nes_s		;S=FF
	mov cycles,#0

	;(clear irq/nmi/res source)...

	ldr r0,memmap_tbl+7*4
	ldr r1,=RES_VECTOR
	ldrb nes_pc,[r0,r1]!
	ldrb r2,[r0,#1]
	orr nes_pc,nes_pc,r2,lsl#8
	encodePC		;get RESET vector

	adr r0,cpuregs
	stmia r0,{nes_nz-nes_pc}
	mov pc,addy
normalops
	DCD _10,_30,_50,_70,_90,_B0,_D0,_F0,_4C
jmpops
	DCD _10x,_30x,_50x,_70x,_90x,_B0x,_D0x,_F0x,_4Cx
opindex
	DCD op_table+0x10*4,op_table+0x30*4,op_table+0x50*4,op_table+0x70*4,op_table+0x90*4
	DCD op_table+0xB0*4,op_table+0xD0*4,op_table+0xF0*4,op_table+0x4C*4
;----------------------------------------------------------
	AREA wram_globals0, CODE, READWRITE

op_table
	DCD _00,_01,_xx,_xx,_xx,_05,_06,_xx,_08,_09,_0A,_xx,_xx,_0D,_0E,_xx
	DCD _10,_11,_xx,_xx,_xx,_15,_16,_xx,_18,_19,_xx,_xx,_xx,_1D,_1E,_xx
	DCD _20,_21,_xx,_xx,_24,_25,_26,_xx,_28,_29,_2A,_xx,_2C,_2D,_2E,_xx
	DCD _30,_31,_xx,_xx,_xx,_35,_36,_xx,_38,_39,_xx,_xx,_xx,_3D,_3E,_xx
	DCD _40,_41,_xx,_xx,_xx,_45,_46,_xx,_48,_49,_4A,_xx,_4C,_4D,_4E,_xx
	DCD _50,_51,_xx,_xx,_xx,_55,_56,_xx,_58,_59,_xx,_xx,_xx,_5D,_5E,_xx
	DCD _60,_61,_xx,_xx,_xx,_65,_66,_xx,_68,_69,_6A,_xx,_6C,_6D,_6E,_xx
	DCD _70,_71,_xx,_xx,_xx,_75,_76,_xx,_78,_79,_xx,_xx,_xx,_7D,_7E,_xx
	DCD _xx,_81,_xx,_xx,_84,_85,_86,_xx,_88,_xx,_8A,_xx,_8C,_8D,_8E,_xx
	DCD _90,_91,_xx,_xx,_94,_95,_96,_xx,_98,_99,_9A,_xx,_xx,_9D,_xx,_xx
	DCD _A0,_A1,_A2,_xx,_A4,_A5,_A6,_xx,_A8,_A9,_AA,_xx,_AC,_AD,_AE,_xx
	DCD _B0,_B1,_xx,_xx,_B4,_B5,_B6,_xx,_B8,_B9,_BA,_xx,_BC,_BD,_BE,_xx
	DCD _C0,_C1,_xx,_xx,_C4,_C5,_C6,_xx,_C8,_C9,_CA,_xx,_CC,_CD,_CE,_xx
	DCD _D0,_D1,_xx,_xx,_xx,_D5,_D6,_xx,_D8,_D9,_xx,_xx,_xx,_DD,_DE,_xx
	DCD _E0,_E1,_xx,_xx,_E4,_E5,_E6,_xx,_E8,_E9,_EA,_xx,_EC,_ED,_EE,_xx
	DCD _F0,_F1,_xx,_xx,_xx,_F5,_F6,_xx,_F8,_F9,_xx,_xx,_xx,_FD,_FE,_xx
  ;readmem_tbl
	DCD ram_R    ;$0000
	DCD PPU_R    ;$2000
	DCD IO_R     ;$4000
	DCD sram_R   ;$6000
	DCD rom_R    ;$8000
	DCD rom_R    ;$A000
	DCD rom_R    ;$C000
	DCD rom_R    ;$E000
  ;writemem_tbl
	DCD ram_W	;$0000
	DCD PPU_W	;$2000
	DCD IO_W	;$4000
	DCD sram_W	;$6000
	DCD void	;$8000
	DCD void	;$A000
	DCD void	;$C000
	DCD void	;$E000
   ;memmap_tbl
	DCD NES_RAM		;$0000   0000-7fff
	DCD NES_RAM		;$2000    should
	DCD NES_RAM		;$4000     never
	DCD NES_RAM-0x5800	;$6000      change
rommap	% 4*4			;$8000-FFFF

cpustate
	;group these together for save/loadstate
	% 7*4 ;cpuregs (nz,c,a,x,y,cycles,pc)
	DCD 0 ;nes_s:
	DCD 0 ;nes_di:   (ONLY d,i bits are set)
	DCD 0 ;nes_v:    PSR_V (everything else undefined)
	DCD 0 ;lastbank: last memmap added to PC (used to calculate current PC)

	DCD 0 ;nexttimeout:  jump here when cycles runs out
	DCD 0 ;scanline
	DCD 0 ;scanlinehook
	DCD 0 ;frame
;----------------------------------------------------------------------------
	END


Tables:

240 lines
8 byte/entry: VROM Memory map table
such as 01234567 01234567...

4 lines
4 byte/entry:
Mapping from bank per scanline to a GBA background VRAM slot
such as 0123 4567 2145 8197


[[Background]]
Stuff background rendering needs:
Mirroring data per scanline
Memory map table per scanline
tile origin per scanline
scrolling data per scanline








[[Sprite Lookup]]
(8x8)

fastest case: (current pocketnes method)
Assuming constant vrom bank for sprites, and patterntable half
base_gbatile = f(origin)
gbatile(tile)=base_gbatile+tile
(1 operation)

slowest case:
gbatile(y,tile) = cache[memmap[y*8+tile>>6+origin[y]*4]]+ (tile & 63)
cache = table to map page numbers to GBA VRAM sprite tile numbers
if cache miss, fetch 1k of VROM data.  Shouldn't happen with VRAM only games.

t1=memmap+y*8
t1=t1+tile>>6
t0=origin[y]
if (t0 & whatever)
	t1=t1+4
t1=[t1]
t1=cache[t1]
t0=tile&63
t1=t1+t0
if miss, fetch
(10 operations, 3 additional memory reads)


(8x16)

fastest case:
Assuming constant vrom bank for sprites
gbatile(tile)=base(tile&1) + tile&254
(2 operations)

slowest case:
gbatile(y,tile) = cache[memmap[y*8+tile>>6+(tile&1)*4]]+(tile&62)

t1=memmap+y*8
if (tile &1)
	t1=t1+4
t1=t1+tile>>6
t1=[t1]
t1=cache[t1]
t0=tile&62
t1=t1+t0
if miss, fetch
(9 operations, 2 additional memory reads)

Using slow methods adds up to 640 instructions.  Not much, shouldn't slow down much.


cache size = 256*4 (1024) bytes
memmap size = 240*8 (1920) bytes
origin table can be stowed away somewhere else?

